<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:security="http://www.springframework.org/schema/security"
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/security
                        http://www.springframework.org/schema/security/spring-security-3.2.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">


	<security:http auto-config="true" use-expressions="true">
	
		<!-- URL's security - for defining exception urls -->
		<security:intercept-url pattern="/" access="permitAll"/>
<!-- 		<security:intercept-url pattern="/login*" access="permitAll"/>	 -->
		
		<!-- login handler -->
		<security:form-login
			authentication-failure-handler-ref="customAuthFailureHandler"
			authentication-success-handler-ref="customAuthSuccessHandler"
			login-page="/login.htm"></security:form-login>

		<!-- logout handler -->
		<security:logout logout-url="/logout.htm" invalidate-session="true" success-handler-ref="customLogoutSuccessHandler"/>
		
		<!-- session management -->
		<security:session-management invalid-session-url="/sessionExpired.htm">
			<security:concurrency-control max-sessions="1" error-if-maximum-exceeded="true" />
		</security:session-management>
		
	</security:http>
	
	
	<!-- Authentication manager -->
	<security:authentication-manager alias="authenticationManager">
        <security:authentication-provider ref="authProvider"></security:authentication-provider>
    </security:authentication-manager>


	<!-- Provider of Spring for authentication -->	
<!--  	<bean id="authProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider"> -->
	<bean id="authProvider" class="com.mhp.service.user.CustomAuthenticationProvider">
		
		<property name="userDetailsService" ref="userService"></property>
		<!-- for checking encoded password from database while authentication -->
		<property name="passwordEncoder" ref="passwordEncoder"></property>      
    </bean>


	<!-- UserDetailsService -->
	<bean id="userService" class="com.mhp.service.user.UserService">
        <property name="userDao" ref="userDao"></property>
    </bean>
	
	
	<!-- UserDAO -->
	<bean id="userDao" class="com.mhp.dao.user.UserDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	
	<!-- One of the filter from filter chain -->
	<bean id="authenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<property name="filterProcessesUrl" value="/j_spring_security_check" />
		<property name="authenticationManager" ref="authenticationManager"></property>
	</bean>
	
	
	<!-- Transaction Manager for hibernate -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>


	<!-- OTHER BEAN CLASSES START -->
	<bean id="customAuthSuccessHandler" class="com.mhp.service.user.CustomAuthenticationSuccessHandler">
		<property name="userDao" ref="userDao"></property>
	</bean>

	<bean id="customAuthFailureHandler" class="com.mhp.service.user.CustomAuthenticationFailureHandler">
		<!-- <property name="defaultFailureUrl" value="/login.htm?login_error=1"></property> -->
		<property name="userService" ref="userService"></property>
	</bean>

	<bean id="customLogoutSuccessHandler" class="com.mhp.service.user.CustomLogoutSuccessHandler">
		<property name="userDao" ref="userDao"></property>
	</bean>

	<bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
		<constructor-arg value="256"></constructor-arg>
	</bean>
	<!-- OTHER BEAN CLASSES END -->
	
	
	
</beans>                        